"""Switch BillPart from percentage to exact amount

Revision ID: dca373bd571e
Revises: d0ddf87bfa73
Create Date: 2024-03-29 16:16:32.483424

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import table, column
from sqlalchemy import Numeric, Integer, select, and_


# revision identifiers, used by Alembic.
revision: str = 'dca373bd571e'
down_revision: Union[str, None] = 'd0ddf87bfa73'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Step 1: Add the new 'amount_owed' column, making it nullable temporarily
    op.add_column('bill_part', sa.Column('amount_owed', sa.Numeric(precision=10, scale=2), nullable=True))

    # Step 2: Data migration - populate 'amount_owed' from existing data
    # Define table representations for the query
    bill_part_table = table('bill_part',
        column('bill_id', Integer),
        column('user_id', Integer),
        column('percentage', Numeric),
        column('amount_owed', Numeric)
    )
    bills_table = table('bills',
        column('bill_id', Integer),
        column('total_amount', Numeric)
    )

    # Create a connection for executing the data migration query
    conn = op.get_bind()
    
    # Select all bill parts and join with bills to get total_amount
    results = conn.execute(
        select(
            bill_part_table.c.bill_id,
            bill_part_table.c.user_id,
            bill_part_table.c.percentage,
            bills_table.c.total_amount
        ).select_from(
            bill_part_table.join(bills_table, bill_part_table.c.bill_id == bills_table.c.bill_id)
        )
    ).fetchall()

    # Calculate and update amount_owed for each part
    for row in results:
        bill_id, user_id, percentage, total_amount = row
        if percentage is not None and total_amount is not None:
            # Calculate the exact amount
            amount_owed = (total_amount * percentage) / 100
            
            # Update the specific bill_part row
            conn.execute(
                bill_part_table.update().where(
                    and_(
                        bill_part_table.c.bill_id == bill_id,
                        bill_part_table.c.user_id == user_id
                    )
                ).values(
                    amount_owed=amount_owed
                )
            )

    # Step 3: Now that data is migrated, make 'amount_owed' not nullable
    op.alter_column('bill_part', 'amount_owed', nullable=False)

    # Step 4: Drop the old 'percentage' column
    op.drop_column('bill_part', 'percentage')

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Step 1: Add back the 'percentage' column, nullable for now
    op.add_column('bill_part', sa.Column('percentage', sa.Numeric(precision=5, scale=2), nullable=True))

    # Step 2: Data migration - populate 'percentage' from 'amount_owed'
    bill_part_table = table('bill_part',
        column('bill_id', Integer),
        column('user_id', Integer),
        column('percentage', Numeric),
        column('amount_owed', Numeric)
    )
    bills_table = table('bills',
        column('bill_id', Integer),
        column('total_amount', Numeric)
    )
    conn = op.get_bind()
    results = conn.execute(
        select(
            bill_part_table.c.bill_id,
            bill_part_table.c.user_id,
            bill_part_table.c.amount_owed,
            bills_table.c.total_amount
        ).select_from(
            bill_part_table.join(bills_table, bill_part_table.c.bill_id == bills_table.c.bill_id)
        )
    ).fetchall()
    
    for row in results:
        bill_id, user_id, amount_owed, total_amount = row
        if amount_owed is not None and total_amount is not None and total_amount > 0:
            # Calculate percentage
            percentage = (amount_owed / total_amount) * 100
            
            # Update the row
            conn.execute(
                bill_part_table.update().where(
                    and_(
                        bill_part_table.c.bill_id == bill_id,
                        bill_part_table.c.user_id == user_id
                    )
                ).values(
                    percentage=percentage
                )
            )

    # Step 3: Make 'percentage' not nullable
    op.alter_column('bill_part', 'percentage', nullable=False)

    # Step 4: Drop the 'amount_owed' column
    op.drop_column('bill_part', 'amount_owed')
    
    # ### end Alembic commands ###
